name: "Test, build, push, and deploy"

on:
  push:
    branches:
      - main

jobs:
  pipeline:
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17.0.13+11"

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven

      - name: Start Application With Profile Test
        env:
          H2_USERNAME: sa
          H2_PASSWORD: password
        run: nohup mvn spring-boot:run -Dspring-boot.run.profiles=test &

      - name: Wait for application
        run: ./s6-wait-for-app.sh
        
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      
      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
          -Dsonar.projectKey=efrancodelima_producao

      - name: Verify analyze result
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./s2-sonar-qube.sh

      - name: Build with Maven
        env:
          JAVA_HOME: /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/17.0.13-11/x64
          JAVA_HOME_17_X64: /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/17.0.13-11/x64
        run: mvn clean install -DskipTests

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        env:
          DATASOURCE_URL: ${{ secrets.DATASOURCE_URL }}
          DATASOURCE_USERNAME: ${{ secrets.DATASOURCE_USERNAME }}
          DATASOURCE_PASSWORD: ${{ secrets.DATASOURCE_PASSWORD }}
          DATASOURCE_DRIVER: ${{ secrets.DATASOURCE_DRIVER }}
        run: docker build -t app-lanchonete -f Dockerfile .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region us-east-1 |
          docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

      - name: Set logout flag
        run: echo "LOGIN_ECR=true" >> $GITHUB_ENV

      - name: Tag and push docker image
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        run: ./s3-ecr-push.sh

      - name: Logout from Amazon ECR
        if: always() && env.LOGIN_ECR == 'true'
        run: docker logout ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

      - name: Deploy on Amazon ECS
        run: ./s4-ecs-deploy.sh